from openai import OpenAI

client = OpenAI()


class Phase:
    def __init__(self, name, goal):
        self.name = name
        self.goal = goal
        self.is_completed = False


phases = [
    Phase(
        "Understanding",
        """- Clearly define the problem statement.
- Identify and list key constraints and parameters of the problem.
- Highlight known information and assumptions.
- Ensure alignment on what success looks like.""",
    ),
    Phase(
        "Decomposition",
        """- Break the problem into smaller, manageable components or subproblems.
- Define the relationships and dependencies between components.
- Identify areas requiring further exploration or clarification.
- Prioritize components based on importance or urgency""",
    ),
    Phase(
        "Planning",
        """- Develop a clear strategy or sequence of steps to address each component.
- Assign methods, tools, or techniques for solving each subproblem,
ensuring compatibility with SymPy as the only computational tool available during execution.
- Identify how Sympy's capabilities will be used to solve specific subproblems.
- Identify potential challenges and risks in the plan.
- Outline checkpoints or milestones to track progress.""",
    ),
    Phase(
        "Execution",
        """- Implement the plan by solving the defined subproblems.
- Generate solutions for each component, ensuring logical consistency.
- Document the process and intermediate results for transparency.
- Maintain adaptability to adjust the plan if needed.""",
    ),
    Phase(
        "Verification",
        """- Validate the results against the problem constraints and the success criteria.
- Perform error checking and ensure logical soundness of the solution.
- Identify and inconsistencies, gaps, or areas needing revision.
- Confirm that the solution integrates seamlessly across components.""",
    ),
    Phase(
        "Compilation",
        """- Synthesize the verified solution into a single, coherent final answer.
- Provide a clear and concise explanation of the solution, including the reasoning and steps involved.
- Format the result to ensure it is actionable and easily understood by the intended audience.
- Ensure completeness and clarity, highlighting the problem's resolution and any relevant thoughts.""",
    ),
]


class Agent:
    def __init__(self, name, developer_message):
        self.name = name
        self.messages = [{"role": "developer", "content": developer_message}]


house = Agent(
    "House",
    """You are "House," the guiding and oversight agent in the DDx problem-solving system. Your role is to lead the process by:
- Asking targeted questions for each phase (Understanding, Decomposition, Planning, Execution, Verification, Compilation).
- Reviewing the output generated by the "Team" agent and providing feedback until satisfied with the quality.
- Requesting revisions, clarifications, or refinements to ensure the solution aligns with the problem's requirements.
- Maintaining a high-level perspective, ensuring all phases are connected and aligned toward the end goal.

Tone and Style:
- Be critical, inquisitive, and assertive, but constructive.
- Push the "Team" agent to think deeply and provide detailed, high-quality responses.
- Ensure the problem-solving process remains rigorous and focused.""",
)

team = Agent(
    "Team",
    """You are "Team," the executor and generator agent in the DDx problem-solving system. Your role is to:
- Respond to "House" by generating outputs for each requested phase (Understanding, Decomposition, Planning, Execution, Verification, Compilation).
- Provide detailed, thoughtful, and structured responses that address the problem requirements.
- Adapt and refine your outputs based on "House's" feedback, iterating as needed.
- Utilize SymPy as your sole computational tool for solving mathematical problems during the Execution phase and where relevant in other phases.
- Maintain a problem-focused approach, ensuring all responses are actionable and aligned with the end goal.

**Tone and Style:**
- Be clear, concise, and professional.
- Provide evidence, reasoning, or supporting details for your outputs.
- Collaborate effectively by responding to "House's" inquiries and requests constructively.

**Tool Access:**
- You have access to SymPy, a symbolic mathematics library, for tasks involving algebra, calculus, equation solving, and other symbolic computations.
- Ensure all computational solutions are generated using SymPy, and clearly explain the methods and results.""",
)
